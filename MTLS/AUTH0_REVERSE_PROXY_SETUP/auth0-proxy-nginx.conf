server {
    server_name subdomain.domain.com;

    location / {
        proxy_pass  https://yourTenant-{custom_domain_id}.edge.tenants.auth0.com; #Origin Domain Name which you need to configure your reverse proxy
        include /etc/nginx/subdomain-files/common_proxy_headers.conf;  # Include common headers
    }
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/subdomain.domain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/subdomain.domain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
    if ($host = subdomain.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name subdomain.domain.com;
    listen 80;
    return 404; # managed by Certbot


}

    server {
    server_name mtls.subdomain.domain.com;

    location / {
        #if ($ssl_client_verify != SUCCESS) {
        #  return 403;
        #}
        proxy_pass  https://oidc-tests-cd-enrtxifleeouj0gn.edge.tenants.auth0.com;
        include /etc/nginx/subdomain-files/common_proxy_headers.conf;  # Include common headers

        proxy_set_header        Client-Certificate $ssl_client_escaped_cert; # auth0 requires these headers for getting the client cert
        proxy_set_header        Client-Certificate-CA-Verified $ssl_client_verify;
    }


    listen 443 ssl; # managed by Certbot
    proxy_ssl_server_name on;
    ssl_certificate /etc/letsencrypt/live/mtls.subdomain.domain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/mtls.subdomain.domain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # client certificate
    ssl_client_certificate /etc/nginx/client_certs/subdomain.crt; # include here the CA certs for the client certs you want to trust
    # make verification optional, so we can display a 403 message to those
    # who fail authentication
    ssl_verify_client optional_no_ca;
    ssl_verify_depth 2;

    access_log /var/log/nginx/mtls.subdomain.domain.com;
    error_log /var/log/nginx/mtls.subdomain.domain.com-error.log debug;
}


server {
    if ($host = mtls.subdomain.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name mtls.subdomain.domain.com;



    listen 80;
    return 404; # managed by Certbot


}